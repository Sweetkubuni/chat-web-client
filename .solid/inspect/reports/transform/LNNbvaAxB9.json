{
  "resolvedId": "C:/Users/QUAN DOAN/Desktop/freelance/chat-web-client/src/helper/LiveKitHelper.ts",
  "transforms": [
    {
      "name": "__load__",
      "result": "import {\r\n  ConnectionQuality,\r\n  ConnectionState,\r\n  DisconnectReason,\r\n  LocalAudioTrack,\r\n  LocalParticipant,\r\n  LogLevel,\r\n  MediaDeviceFailure,\r\n  Participant,\r\n  ParticipantEvent,\r\n  RemoteParticipant,\r\n  RemoteTrackPublication,\r\n  RemoteVideoTrack,\r\n  Room,\r\n  RoomConnectOptions,\r\n  RoomEvent,\r\n  RoomOptions,\r\n  Track,\r\n  TrackPublication,\r\n  VideoCaptureOptions,\r\n  VideoCodec,\r\n  VideoPresets,\r\n  VideoQuality,\r\n  createAudioAnalyser,\r\n  setLogLevel,\r\n  supportsAV1,\r\n  supportsVP9,\r\n} from 'livekit-client';\r\n\r\nlet currentRoom: Room | undefined;\r\nconst $ = <T extends HTMLElement>(id: string) => document.getElementById(id) as T;\r\nlet startTime: number;\r\n\r\nconst state = {\r\n  isFrontFacing: false,\r\n  encoder: new TextEncoder(),\r\n  decoder: new TextDecoder(),\r\n  defaultDevices: new Map<MediaDeviceKind, string>(),\r\n  bitrateInterval: undefined as any,\r\n};\r\n\r\nenum DataPacket_Kind {\r\n  RELIABLE = 0,\r\n  LOSSY = 1,\r\n  UNRECOGNIZED = -1,\r\n}\r\n\r\nclass LiveKitHelper {\r\n  private serverUrl: string;\r\n  private apiKey: string;\r\n  private apiSecret: string;\r\n\r\n  constructor(serverUrl: string, apiKey: string, apiSecret: string) {\r\n    this.serverUrl = serverUrl;\r\n    this.apiKey = apiKey;\r\n    this.apiSecret = apiSecret;\r\n\r\n    // ------------------------------------------------------------------------------------------------\r\n\r\n\r\n    // // publish local camera and mic tracks\r\n    // await room.localParticipant.enableCameraAndMicrophone();\r\n\r\n\r\n  }\r\n\r\n  async connectToRoom(\r\n    url: string,\r\n    token: string\r\n  ) {\r\n\r\n    const roomOpts: RoomOptions = {\r\n      // adaptiveStream,\r\n      // dynacast,\r\n      publishDefaults: {\r\n        // simulcast,\r\n        videoSimulcastLayers: [VideoPresets.h90, VideoPresets.h216],\r\n        videoCodec: 'vp8',\r\n      },\r\n      videoCaptureDefaults: {\r\n        resolution: VideoPresets.h720.resolution,\r\n      },\r\n    };\r\n\r\n    const connectOpts: RoomConnectOptions = {\r\n      autoSubscribe: true,\r\n    };\r\n    // if (forceTURN) {\r\n    //   connectOpts.rtcConfig = {\r\n    //     iceTransportPolicy: 'relay',\r\n    //   };\r\n    // }\r\n    const room = new Room(roomOpts);\r\n\r\n    startTime = Date.now();\r\n    await room.prepareConnection(url);\r\n    // const prewarmTime = Date.now() - startTime;\r\n    // console.log(`prewarmed connection in ${prewarmTime}ms`);\r\n\r\n    room\r\n      .on(RoomEvent.ParticipantConnected, this.participantConnected)\r\n      .on(RoomEvent.ParticipantDisconnected, this.participantDisconnected)\r\n      // .on(RoomEvent.DataReceived, this.handleData)\r\n      // .on(RoomEvent.Disconnected, handleRoomDisconnect)\r\n      .on(RoomEvent.TrackSubscribed, this.handleTrackSubscribed)\r\n      .on(RoomEvent.TrackUnsubscribed, this.handleTrackUnsubscribed)\r\n      .on(RoomEvent.ActiveSpeakersChanged, this.handleActiveSpeakerChange)\r\n      .on(RoomEvent.Disconnected, this.handleDisconnect)\r\n      .on(RoomEvent.Reconnecting, () => console.log('Reconnecting to room'))\r\n      .on(RoomEvent.Reconnected, async () => {\r\n        // console.log(\r\n        //   'Successfully reconnected. server',\r\n        //   await room.engine.getConnectedServerAddress(),\r\n        // );\r\n      })\r\n      .on(RoomEvent.LocalTrackPublished, (pub) => {\r\n        const track = pub.track as LocalAudioTrack;\r\n\r\n        // if (track instanceof LocalAudioTrack) {\r\n        //   const { calculateVolume } = createAudioAnalyser(track);\r\n\r\n        //   setInterval(() => {\r\n        //     $('local-volume')?.setAttribute('value', calculateVolume().toFixed(4));\r\n        //   }, 200);\r\n        // }\r\n        this.renderParticipant(room.localParticipant);\r\n        // updateButtonsForPublishState();\r\n        // renderScreenShare(room);\r\n      })\r\n      // .on(RoomEvent.LocalTrackUnpublished, () => {\r\n      //   renderParticipant(room.localParticipant);\r\n      //   updateButtonsForPublishState();\r\n      //   renderScreenShare(room);\r\n      // })\r\n      .on(RoomEvent.RoomMetadataChanged, (metadata) => {\r\n        // console.log('new metadata for room', metadata);\r\n      })\r\n      // .on(RoomEvent.MediaDevicesChanged, handleDevicesChanged)\r\n      .on(RoomEvent.AudioPlaybackStatusChanged, () => {\r\n        // if (room.canPlaybackAudio) {\r\n        //   $('start-audio-button')?.setAttribute('disabled', 'true');\r\n        // } else {\r\n        //   $('start-audio-button')?.removeAttribute('disabled');\r\n        // }\r\n      })\r\n      // .on(RoomEvent.MediaDevicesError, (e: Error) => {\r\n      //   const failure = MediaDeviceFailure.getFailure(e);\r\n      //   console.log('media device failure', failure);\r\n      // })\r\n      .on(\r\n        RoomEvent.ConnectionQualityChanged,\r\n        (quality: ConnectionQuality, participant?: Participant) => {\r\n          // console.log('connection quality changed', participant?.identity, quality);\r\n        },\r\n      )\r\n      .on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\r\n        // console.log('subscribed to track', pub.trackSid, participant.identity);\r\n        this.renderParticipant(participant);\r\n        // renderScreenShare(room);\r\n      })\r\n      .on(RoomEvent.TrackUnsubscribed, (_, pub, participant) => {\r\n        // console.log('unsubscribed from track', pub.trackSid);\r\n        this.renderParticipant(participant);\r\n        // renderScreenShare(room);\r\n      })\r\n      .on(RoomEvent.SignalConnected, async () => {\r\n        // const signalConnectionTime = Date.now() - startTime;\r\n        // console.log(`signal connection established in ${signalConnectionTime}ms`);\r\n        // // speed up publishing by starting to publish before it's fully connected\r\n        // // publishing is accepted as soon as signal connection has established\r\n        // if (shouldPublish) {\r\n        //   await room.localParticipant.enableCameraAndMicrophone();\r\n        //   console.log(`tracks published in ${Date.now() - startTime}ms`);\r\n        //   updateButtonsForPublishState();\r\n      })\r\n    try {\r\n      // debugger\r\n      await room.connect(url, token, connectOpts);\r\n      // const elapsed = Date.now() - startTime;\r\n      // console.log(\r\n      //   `successfully connected to ${room.name} in ${Math.round(elapsed)}ms`,\r\n      //   await room.engine.getConnectedServerAddress(),\r\n      // );\r\n    } catch (error: any) {\r\n      let message: any = error;\r\n      if (error.message) {\r\n        message = error.message;\r\n      }\r\n      // console.log('could not connect:', message);\r\n      return;\r\n    }\r\n    currentRoom = room;\r\n    // window.currentRoom = room;\r\n    // setButtonsForState(true);\r\n\r\n    // room.participants.forEach((participant) => {\r\n    //   participantConnected(participant);\r\n    // });\r\n    // participantConnected(room.localParticipant);\r\n\r\n    return room;\r\n  }\r\n\r\n  handleData(msg: Uint8Array, participant?: RemoteParticipant) {\r\n    // const str = state.decoder.decode(msg);\r\n    // const chat = <HTMLTextAreaElement>$('chat');\r\n    // let from = 'server';\r\n    // if (participant) {\r\n    //   from = participant.identity;\r\n    // }\r\n    // chat.value += `${from}: ${str}\\n`;\r\n    return state.decoder.decode(msg);\r\n  }\r\n\r\n  disconnectRoom() {\r\n    if (currentRoom) {\r\n      currentRoom.disconnect();\r\n    }\r\n    // if (state.bitrateInterval) {\r\n    //   clearInterval(state.bitrateInterval);\r\n    // }\r\n  }\r\n\r\n  enterText(value: string) {\r\n    if (!currentRoom) return false;\r\n    if (value) {\r\n      const msg = state.encoder.encode(value);\r\n      currentRoom.localParticipant.publishData(msg, DataPacket_Kind.RELIABLE);\r\n      // (<HTMLTextAreaElement>(\r\n      //   $('chat')\r\n      // )).value += `${currentRoom.localParticipant.identity} (me): ${textField.value}\\n`;\r\n      // textField.value = '';\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  async toggleAudio() {\r\n    if (!currentRoom) return;\r\n    const enabled = currentRoom.localParticipant.isMicrophoneEnabled;\r\n    this.setButtonDisabled('toggle-audio-button', true);\r\n    if (enabled) {\r\n      console.log('disabling audio');\r\n    } else {\r\n      console.log('enabling audio');\r\n    }\r\n    await currentRoom.localParticipant.setMicrophoneEnabled(!enabled);\r\n    this.setButtonDisabled('toggle-audio-button', false);\r\n    this.updateButtonsForPublishState();\r\n  }\r\n\r\n  updateButtonsForPublishState() {\r\n    if (!currentRoom) {\r\n      return;\r\n    }\r\n    const lp = currentRoom.localParticipant;\r\n\r\n    // video\r\n    this.setButtonState(\r\n      'toggle-video-button',\r\n      `${lp.isCameraEnabled ? 'Disable' : 'Enable'} Video`,\r\n      lp.isCameraEnabled,\r\n    );\r\n\r\n    // audio\r\n    this.setButtonState(\r\n      'toggle-audio-button',\r\n      `${lp.isMicrophoneEnabled ? 'Disable' : 'Enable'} Audio`,\r\n      lp.isMicrophoneEnabled,\r\n    );\r\n\r\n    // screen share\r\n    this.setButtonState(\r\n      'share-screen-button',\r\n      lp.isScreenShareEnabled ? 'Stop Screen Share' : 'Share Screen',\r\n      lp.isScreenShareEnabled,\r\n    );\r\n  }\r\n\r\n  setButtonDisabled(buttonId: string, isDisabled: boolean) {\r\n    const el = $(buttonId) as HTMLButtonElement;\r\n    el.disabled = isDisabled;\r\n  }\r\n\r\n  setButtonState(\r\n    buttonId: string,\r\n    buttonText: string,\r\n    isActive: boolean,\r\n    isDisabled: boolean | undefined = undefined,\r\n  ) {\r\n    const el = $(buttonId) as HTMLButtonElement;\r\n    if (!el) return;\r\n    if (isDisabled !== undefined) {\r\n      el.disabled = isDisabled;\r\n    }\r\n    el.innerHTML = buttonText;\r\n    if (isActive) {\r\n      el.classList.add('active');\r\n    } else {\r\n      el.classList.remove('active');\r\n    }\r\n  }\r\n\r\n  async toggleVideo() {\r\n    if (!currentRoom) return;\r\n    // setButtonDisabled('toggle-video-button', true);\r\n    const enabled = currentRoom.localParticipant.isCameraEnabled;\r\n    if (enabled) {\r\n      console.log('disabling video');\r\n    } else {\r\n      console.log('enabling video');\r\n    }\r\n    await currentRoom.localParticipant.setCameraEnabled(!enabled);\r\n    // setButtonDisabled('toggle-video-button', false);\r\n    this.renderSmallParticipant(currentRoom.localParticipant);\r\n\r\n    // update display\r\n    // updateButtonsForPublishState();\r\n  }\r\n\r\n  updateVideoSize(element: HTMLVideoElement, target: HTMLElement) {\r\n    target.innerHTML = `(${element.videoWidth}x${element.videoHeight})`;\r\n  }\r\n\r\n  // updates participant UI\r\n  renderParticipant(participant: Participant, remove: boolean = false) {\r\n    const container = $('participants-area');\r\n    if (!container) return;\r\n    const { identity } = participant;\r\n    let div = $(`participant-${identity}`);\r\n    if (!div && !remove) {\r\n      div = document.createElement('div');\r\n      div.id = `participant-${identity}`;\r\n      div.className = 'participant';\r\n      // <span id=\"codec-${identity}\" class=\"codec\">\r\n      // </span>\r\n      // <span id=\"size-${identity}\" class=\"size\">\r\n      // </span>\r\n      // <span id=\"bitrate-${identity}\" class=\"bitrate\">\r\n      // </span>\r\n      // <span id=\"signal-${identity}\"></span>\r\n      //     <span id=\"mic-${identity}\" class=\"mic-on\"></span>\r\n      div.innerHTML = `\r\n      <video id=\"video-${identity}\"></video>\r\n      <audio id=\"audio-${identity}\"></audio>\r\n      <div class=\"info-bar\">\r\n        <div id=\"name-${identity}\" class=\"name\">\r\n        </div>\r\n        <div style=\"text-align: center;\">\r\n          <span id=\"signal-${identity}\"></span>\r\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\r\n        </div>\r\n        <div class=\"right\">\r\n          \r\n        </div>\r\n      </div>\r\n      ${participant instanceof RemoteParticipant\r\n          ? `<div class=\"volume-control\">\r\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\r\n      </div>`\r\n          : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`\r\n        }\r\n\r\n    `;\r\n      $(`video-element`).replaceWith(div);\r\n\r\n      const sizeElm = $(`size-${identity}`);\r\n      const videoElm = <HTMLVideoElement>$(`video-${identity}`);\r\n      videoElm.onresize = () => {\r\n        this.updateVideoSize(videoElm!, sizeElm!);\r\n      };\r\n    }\r\n    const videoElm = <HTMLVideoElement>$(`video-${identity}`);\r\n    const audioELm = <HTMLAudioElement>$(`audio-${identity}`);\r\n    if (remove) {\r\n      div?.remove();\r\n      if (videoElm) {\r\n        videoElm.srcObject = null;\r\n        videoElm.src = '';\r\n      }\r\n      if (audioELm) {\r\n        audioELm.srcObject = null;\r\n        audioELm.src = '';\r\n      }\r\n      return;\r\n    }\r\n\r\n    // update properties\r\n    $(`name-${identity}`)!.innerHTML = participant.identity;\r\n    if (participant instanceof LocalParticipant) {\r\n      $(`name-${identity}`)!.innerHTML += ' (you)';\r\n    }\r\n    const micElm = $(`mic-${identity}`)!;\r\n    const signalElm = $(`signal-${identity}`)!;\r\n    const cameraPub = participant.getTrack(Track.Source.Camera);\r\n    const micPub = participant.getTrack(Track.Source.Microphone);\r\n    if (participant.isSpeaking) {\r\n      div!.classList.add('speaking');\r\n    } else {\r\n      div!.classList.remove('speaking');\r\n    }\r\n\r\n    if (participant instanceof RemoteParticipant) {\r\n      const volumeSlider = <HTMLInputElement>$(`volume-${identity}`);\r\n      volumeSlider.addEventListener('input', (ev) => {\r\n        participant.setVolume(Number.parseFloat((ev.target as HTMLInputElement).value));\r\n      });\r\n    }\r\n\r\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\r\n    if (cameraEnabled) {\r\n      if (participant instanceof LocalParticipant) {\r\n        // flip\r\n        videoElm.style.transform = 'scale(-1, 1)';\r\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\r\n        const renderStartTime = Date.now();\r\n        // measure time to render\r\n        videoElm.onloadeddata = () => {\r\n          const elapsed = Date.now() - renderStartTime;\r\n          let fromJoin = 0;\r\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\r\n            fromJoin = Date.now() - startTime;\r\n          }\r\n          // appendLog(\r\n          //   `RemoteVideoTrack ${cameraPub?.trackSid} (${videoElm.videoWidth}x${videoElm.videoHeight}) rendered in ${elapsed}ms`,\r\n          //   fromJoin > 0 ? `, ${fromJoin}ms from start` : '',\r\n          // );\r\n        };\r\n      }\r\n      cameraPub?.videoTrack?.attach(videoElm);\r\n    } else {\r\n      // clear information display\r\n      $(`size-${identity}`)!.innerHTML = '';\r\n      if (cameraPub?.videoTrack) {\r\n        // detach manually whenever possible\r\n        cameraPub.videoTrack?.detach(videoElm);\r\n      } else {\r\n        videoElm.src = '';\r\n        videoElm.srcObject = null;\r\n      }\r\n    }\r\n\r\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\r\n    if (micEnabled) {\r\n      if (!(participant instanceof LocalParticipant)) {\r\n        // don't attach local audio\r\n        audioELm.onloadeddata = () => {\r\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\r\n            const fromJoin = Date.now() - startTime;\r\n            // appendLog(`RemoteAudioTrack ${micPub?.trackSid} played ${fromJoin}ms from start`);\r\n          }\r\n        };\r\n        micPub?.audioTrack?.attach(audioELm);\r\n      }\r\n      micElm.className = 'mic-on';\r\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\r\n    } else {\r\n      micElm.className = 'mic-off';\r\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\r\n    }\r\n\r\n    micElm.addEventListener(\"click\", this.toggleAudio)\r\n\r\n    // switch (participant.connectionQuality) {\r\n    //   case ConnectionQuality.Excellent:\r\n    //   case ConnectionQuality.Good:\r\n    //   case ConnectionQuality.Poor:\r\n    //     signalElm.className = `connection-${participant.connectionQuality}`;\r\n    //     signalElm.innerHTML = '<i class=\"fas fa-circle\"></i>';\r\n    //     break;\r\n    //   default:\r\n    //     signalElm.innerHTML = '';\r\n    //   // do nothing\r\n    // }\r\n  }\r\n\r\n  // updates participant UI\r\n  renderSmallParticipant(participant: Participant, remove: boolean = false) {\r\n    const container = $('joins-area');\r\n    if (!container) return;\r\n    const { identity } = participant;\r\n    let div = $(`participant-${identity}`);\r\n    if (!div && !remove) {\r\n      div = document.createElement('div');\r\n      div.id = `participant-${identity}`;\r\n      div.className = 'participant';\r\n      div.innerHTML = `\r\n      <video id=\"video-${identity}\"></video>\r\n      <audio id=\"audio-${identity}\"></audio>\r\n      <div class=\"info-bar\">\r\n        <div id=\"name-${identity}\" class=\"name\">\r\n        </div>\r\n        <div style=\"text-align: center;\">\r\n          <span id=\"codec-${identity}\" class=\"codec\">\r\n          </span>\r\n          <span id=\"size-${identity}\" class=\"size\">\r\n          </span>\r\n          <span id=\"bitrate-${identity}\" class=\"bitrate\">\r\n          </span>\r\n        </div>\r\n        <div class=\"right\">\r\n          <span id=\"signal-${identity}\"></span>\r\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\r\n        </div>\r\n      </div>\r\n      ${participant instanceof RemoteParticipant\r\n          ? `<div class=\"volume-control\">\r\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\r\n      </div>`\r\n          : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`\r\n        }\r\n\r\n    `;\r\n      $(`join-element`).replaceWith(div);\r\n\r\n      const sizeElm = $(`size-${identity}`);\r\n      const videoElm = <HTMLVideoElement>$(`video-${identity}`);\r\n      videoElm.onresize = () => {\r\n        this.updateVideoSize(videoElm!, sizeElm!);\r\n      };\r\n    }\r\n    const videoElm = <HTMLVideoElement>$(`video-${identity}`);\r\n    const audioELm = <HTMLAudioElement>$(`audio-${identity}`);\r\n    if (remove) {\r\n      div?.remove();\r\n      if (videoElm) {\r\n        videoElm.srcObject = null;\r\n        videoElm.src = '';\r\n      }\r\n      if (audioELm) {\r\n        audioELm.srcObject = null;\r\n        audioELm.src = '';\r\n      }\r\n      return;\r\n    }\r\n\r\n    // update properties\r\n    $(`name-${identity}`)!.innerHTML = participant.identity;\r\n    if (participant instanceof LocalParticipant) {\r\n      $(`name-${identity}`)!.innerHTML += ' (you)';\r\n    }\r\n    const micElm = $(`mic-${identity}`)!;\r\n    const signalElm = $(`signal-${identity}`)!;\r\n    const cameraPub = participant.getTrack(Track.Source.Camera);\r\n    const micPub = participant.getTrack(Track.Source.Microphone);\r\n    if (participant.isSpeaking) {\r\n      div!.classList.add('speaking');\r\n    } else {\r\n      div!.classList.remove('speaking');\r\n    }\r\n\r\n    if (participant instanceof RemoteParticipant) {\r\n      const volumeSlider = <HTMLInputElement>$(`volume-${identity}`);\r\n      volumeSlider.addEventListener('input', (ev) => {\r\n        participant.setVolume(Number.parseFloat((ev.target as HTMLInputElement).value));\r\n      });\r\n    }\r\n\r\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\r\n    if (cameraEnabled) {\r\n      if (participant instanceof LocalParticipant) {\r\n        // flip\r\n        videoElm.style.transform = 'scale(-1, 1)';\r\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\r\n        const renderStartTime = Date.now();\r\n        // measure time to render\r\n        videoElm.onloadeddata = () => {\r\n          const elapsed = Date.now() - renderStartTime;\r\n          let fromJoin = 0;\r\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\r\n            fromJoin = Date.now() - startTime;\r\n          }\r\n          // appendLog(\r\n          //   `RemoteVideoTrack ${cameraPub?.trackSid} (${videoElm.videoWidth}x${videoElm.videoHeight}) rendered in ${elapsed}ms`,\r\n          //   fromJoin > 0 ? `, ${fromJoin}ms from start` : '',\r\n          // );\r\n        };\r\n      }\r\n      cameraPub?.videoTrack?.attach(videoElm);\r\n    } else {\r\n      // clear information display\r\n      $(`size-${identity}`)!.innerHTML = '';\r\n      if (cameraPub?.videoTrack) {\r\n        // detach manually whenever possible\r\n        cameraPub.videoTrack?.detach(videoElm);\r\n      } else {\r\n        videoElm.src = '';\r\n        videoElm.srcObject = null;\r\n      }\r\n    }\r\n\r\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\r\n    if (micEnabled) {\r\n      if (!(participant instanceof LocalParticipant)) {\r\n        // don't attach local audio\r\n        audioELm.onloadeddata = () => {\r\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\r\n            const fromJoin = Date.now() - startTime;\r\n            // appendLog(`RemoteAudioTrack ${micPub?.trackSid} played ${fromJoin}ms from start`);\r\n          }\r\n        };\r\n        micPub?.audioTrack?.attach(audioELm);\r\n      }\r\n      micElm.className = 'mic-on';\r\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\r\n    } else {\r\n      micElm.className = 'mic-off';\r\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\r\n    }\r\n\r\n    // switch (participant.connectionQuality) {\r\n    //   case ConnectionQuality.Excellent:\r\n    //   case ConnectionQuality.Good:\r\n    //   case ConnectionQuality.Poor:\r\n    //     signalElm.className = `connection-${participant.connectionQuality}`;\r\n    //     signalElm.innerHTML = '<i class=\"fas fa-circle\"></i>';\r\n    //     break;\r\n    //   default:\r\n    //     signalElm.innerHTML = '';\r\n    //   // do nothing\r\n    // }\r\n  }\r\n\r\n  flipVideo() {\r\n    const videoPub = currentRoom?.localParticipant.getTrack(Track.Source.Camera);\r\n    if (!videoPub) {\r\n      return;\r\n    }\r\n    // if (state.isFrontFacing) {\r\n    //   setButtonState('flip-video-button', 'Front Camera', false);\r\n    // } else {\r\n    //   setButtonState('flip-video-button', 'Back Camera', false);\r\n    // }\r\n    state.isFrontFacing = !state.isFrontFacing;\r\n    const options: VideoCaptureOptions = {\r\n      resolution: VideoPresets.h720.resolution,\r\n      facingMode: state.isFrontFacing ? 'user' : 'environment',\r\n    };\r\n    videoPub.videoTrack?.restartTrack(options);\r\n  }\r\n\r\n  async shareScreen() {\r\n    if (!currentRoom) return;\r\n\r\n    const enabled = currentRoom.localParticipant.isScreenShareEnabled;\r\n    console.log(`${enabled ? 'stopping' : 'starting'} screen share`);\r\n    // setButtonDisabled('share-screen-button', true);\r\n    await currentRoom.localParticipant.setScreenShareEnabled(!enabled, { audio: true });\r\n    // setButtonDisabled('share-screen-button', false);\r\n    // updateButtonsForPublishState();\r\n  }\r\n\r\n  startAudio() {\r\n    currentRoom?.startAudio();\r\n  }\r\n\r\n  handleTrackSubscribed(\r\n    track: RemoteTrack,\r\n    publication: RemoteTrackPublication,\r\n    participant: RemoteParticipant,\r\n  ) {\r\n    if (track.kind === Track.Kind.Video || track.kind === Track.Kind.Audio) {\r\n      // attach it to a new HTMLVideoElement or HTMLAudioElement\r\n      // parentElement.appendChild(element);\r\n    }\r\n    track.attach();\r\n  }\r\n\r\n\r\n  handleTrackUnsubscribed(\r\n    track: RemoteTrack,\r\n    publication: RemoteTrackPublication,\r\n    participant: RemoteParticipant,\r\n  ) {\r\n    // remove tracks from all attached elements\r\n    track.detach();\r\n  }\r\n\r\n  //  handleLocalTrackUnpublished(track: LocalTrackPublication, participant: LocalParticipant) {\r\n  //   // when local tracks are ended, update UI to remove them from rendering\r\n  //   track.detach();\r\n  // }\r\n\r\n  handleActiveSpeakerChange(speakers: Participant[]) {\r\n    // show UI indicators when participant is speaking\r\n  }\r\n\r\n  handleDisconnect() {\r\n    console.log('disconnected from room');\r\n  }\r\n\r\n  participantConnected(participant: Participant) {\r\n    participant\r\n      .on(ParticipantEvent.TrackMuted, (pub: TrackPublication) => {\r\n        this.renderParticipant(participant);\r\n      })\r\n      .on(ParticipantEvent.TrackUnmuted, (pub: TrackPublication) => {\r\n        this.renderParticipant(participant);\r\n      })\r\n      .on(ParticipantEvent.IsSpeakingChanged, () => {\r\n        this.renderParticipant(participant);\r\n      })\r\n      .on(ParticipantEvent.ConnectionQualityChanged, () => {\r\n        this.renderParticipant(participant);\r\n      });\r\n  }\r\n  participantDisconnected(participant: RemoteParticipant) {\r\n\r\n    this.renderParticipant(participant, true);\r\n  }\r\n}\r\n\r\nexport default LiveKitHelper;\r\n",
      "start": 1684658983190,
      "end": 1684658983190
    },
    {
      "name": "vite:esbuild",
      "result": "import {\n  LocalParticipant,\n  ParticipantEvent,\n  RemoteParticipant,\n  Room,\n  RoomEvent,\n  Track,\n  VideoPresets\n} from \"livekit-client\";\nlet currentRoom;\nconst $ = (id) => document.getElementById(id);\nlet startTime;\nconst state = {\n  isFrontFacing: false,\n  encoder: new TextEncoder(),\n  decoder: new TextDecoder(),\n  defaultDevices: /* @__PURE__ */ new Map(),\n  bitrateInterval: void 0\n};\nvar DataPacket_Kind = /* @__PURE__ */ ((DataPacket_Kind2) => {\n  DataPacket_Kind2[DataPacket_Kind2[\"RELIABLE\"] = 0] = \"RELIABLE\";\n  DataPacket_Kind2[DataPacket_Kind2[\"LOSSY\"] = 1] = \"LOSSY\";\n  DataPacket_Kind2[DataPacket_Kind2[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return DataPacket_Kind2;\n})(DataPacket_Kind || {});\nclass LiveKitHelper {\n  serverUrl;\n  apiKey;\n  apiSecret;\n  constructor(serverUrl, apiKey, apiSecret) {\n    this.serverUrl = serverUrl;\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n  }\n  async connectToRoom(url, token) {\n    const roomOpts = {\n      // adaptiveStream,\n      // dynacast,\n      publishDefaults: {\n        // simulcast,\n        videoSimulcastLayers: [VideoPresets.h90, VideoPresets.h216],\n        videoCodec: \"vp8\"\n      },\n      videoCaptureDefaults: {\n        resolution: VideoPresets.h720.resolution\n      }\n    };\n    const connectOpts = {\n      autoSubscribe: true\n    };\n    const room = new Room(roomOpts);\n    startTime = Date.now();\n    await room.prepareConnection(url);\n    room.on(RoomEvent.ParticipantConnected, this.participantConnected).on(RoomEvent.ParticipantDisconnected, this.participantDisconnected).on(RoomEvent.TrackSubscribed, this.handleTrackSubscribed).on(RoomEvent.TrackUnsubscribed, this.handleTrackUnsubscribed).on(RoomEvent.ActiveSpeakersChanged, this.handleActiveSpeakerChange).on(RoomEvent.Disconnected, this.handleDisconnect).on(RoomEvent.Reconnecting, () => console.log(\"Reconnecting to room\")).on(RoomEvent.Reconnected, async () => {\n    }).on(RoomEvent.LocalTrackPublished, (pub) => {\n      const track = pub.track;\n      this.renderParticipant(room.localParticipant);\n    }).on(RoomEvent.RoomMetadataChanged, (metadata) => {\n    }).on(RoomEvent.AudioPlaybackStatusChanged, () => {\n    }).on(\n      RoomEvent.ConnectionQualityChanged,\n      (quality, participant) => {\n      }\n    ).on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\n      this.renderParticipant(participant);\n    }).on(RoomEvent.TrackUnsubscribed, (_, pub, participant) => {\n      this.renderParticipant(participant);\n    }).on(RoomEvent.SignalConnected, async () => {\n    });\n    try {\n      await room.connect(url, token, connectOpts);\n    } catch (error) {\n      let message = error;\n      if (error.message) {\n        message = error.message;\n      }\n      return;\n    }\n    currentRoom = room;\n    return room;\n  }\n  handleData(msg, participant) {\n    return state.decoder.decode(msg);\n  }\n  disconnectRoom() {\n    if (currentRoom) {\n      currentRoom.disconnect();\n    }\n  }\n  enterText(value) {\n    if (!currentRoom)\n      return false;\n    if (value) {\n      const msg = state.encoder.encode(value);\n      currentRoom.localParticipant.publishData(msg, 0 /* RELIABLE */);\n      return true;\n    }\n    return false;\n  }\n  async toggleAudio() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isMicrophoneEnabled;\n    this.setButtonDisabled(\"toggle-audio-button\", true);\n    if (enabled) {\n      console.log(\"disabling audio\");\n    } else {\n      console.log(\"enabling audio\");\n    }\n    await currentRoom.localParticipant.setMicrophoneEnabled(!enabled);\n    this.setButtonDisabled(\"toggle-audio-button\", false);\n    this.updateButtonsForPublishState();\n  }\n  updateButtonsForPublishState() {\n    if (!currentRoom) {\n      return;\n    }\n    const lp = currentRoom.localParticipant;\n    this.setButtonState(\n      \"toggle-video-button\",\n      `${lp.isCameraEnabled ? \"Disable\" : \"Enable\"} Video`,\n      lp.isCameraEnabled\n    );\n    this.setButtonState(\n      \"toggle-audio-button\",\n      `${lp.isMicrophoneEnabled ? \"Disable\" : \"Enable\"} Audio`,\n      lp.isMicrophoneEnabled\n    );\n    this.setButtonState(\n      \"share-screen-button\",\n      lp.isScreenShareEnabled ? \"Stop Screen Share\" : \"Share Screen\",\n      lp.isScreenShareEnabled\n    );\n  }\n  setButtonDisabled(buttonId, isDisabled) {\n    const el = $(buttonId);\n    el.disabled = isDisabled;\n  }\n  setButtonState(buttonId, buttonText, isActive, isDisabled = void 0) {\n    const el = $(buttonId);\n    if (!el)\n      return;\n    if (isDisabled !== void 0) {\n      el.disabled = isDisabled;\n    }\n    el.innerHTML = buttonText;\n    if (isActive) {\n      el.classList.add(\"active\");\n    } else {\n      el.classList.remove(\"active\");\n    }\n  }\n  async toggleVideo() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isCameraEnabled;\n    if (enabled) {\n      console.log(\"disabling video\");\n    } else {\n      console.log(\"enabling video\");\n    }\n    await currentRoom.localParticipant.setCameraEnabled(!enabled);\n    this.renderSmallParticipant(currentRoom.localParticipant);\n  }\n  updateVideoSize(element, target) {\n    target.innerHTML = `(${element.videoWidth}x${element.videoHeight})`;\n  }\n  // updates participant UI\n  renderParticipant(participant, remove = false) {\n    const container = $(\"participants-area\");\n    if (!container)\n      return;\n    const { identity } = participant;\n    let div = $(`participant-${identity}`);\n    if (!div && !remove) {\n      div = document.createElement(\"div\");\n      div.id = `participant-${identity}`;\n      div.className = \"participant\";\n      div.innerHTML = `\n      <video id=\"video-${identity}\"></video>\n      <audio id=\"audio-${identity}\"></audio>\n      <div class=\"info-bar\">\n        <div id=\"name-${identity}\" class=\"name\">\n        </div>\n        <div style=\"text-align: center;\">\n          <span id=\"signal-${identity}\"></span>\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\n        </div>\n        <div class=\"right\">\n          \n        </div>\n      </div>\n      ${participant instanceof RemoteParticipant ? `<div class=\"volume-control\">\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\n      </div>` : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`}\n\n    `;\n      $(`video-element`).replaceWith(div);\n      const sizeElm = $(`size-${identity}`);\n      const videoElm2 = $(`video-${identity}`);\n      videoElm2.onresize = () => {\n        this.updateVideoSize(videoElm2, sizeElm);\n      };\n    }\n    const videoElm = $(`video-${identity}`);\n    const audioELm = $(`audio-${identity}`);\n    if (remove) {\n      div?.remove();\n      if (videoElm) {\n        videoElm.srcObject = null;\n        videoElm.src = \"\";\n      }\n      if (audioELm) {\n        audioELm.srcObject = null;\n        audioELm.src = \"\";\n      }\n      return;\n    }\n    $(`name-${identity}`).innerHTML = participant.identity;\n    if (participant instanceof LocalParticipant) {\n      $(`name-${identity}`).innerHTML += \" (you)\";\n    }\n    const micElm = $(`mic-${identity}`);\n    const signalElm = $(`signal-${identity}`);\n    const cameraPub = participant.getTrack(Track.Source.Camera);\n    const micPub = participant.getTrack(Track.Source.Microphone);\n    if (participant.isSpeaking) {\n      div.classList.add(\"speaking\");\n    } else {\n      div.classList.remove(\"speaking\");\n    }\n    if (participant instanceof RemoteParticipant) {\n      const volumeSlider = $(`volume-${identity}`);\n      volumeSlider.addEventListener(\"input\", (ev) => {\n        participant.setVolume(Number.parseFloat(ev.target.value));\n      });\n    }\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\n    if (cameraEnabled) {\n      if (participant instanceof LocalParticipant) {\n        videoElm.style.transform = \"scale(-1, 1)\";\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\n        const renderStartTime = Date.now();\n        videoElm.onloadeddata = () => {\n          const elapsed = Date.now() - renderStartTime;\n          let fromJoin = 0;\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            fromJoin = Date.now() - startTime;\n          }\n        };\n      }\n      cameraPub?.videoTrack?.attach(videoElm);\n    } else {\n      $(`size-${identity}`).innerHTML = \"\";\n      if (cameraPub?.videoTrack) {\n        cameraPub.videoTrack?.detach(videoElm);\n      } else {\n        videoElm.src = \"\";\n        videoElm.srcObject = null;\n      }\n    }\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\n    if (micEnabled) {\n      if (!(participant instanceof LocalParticipant)) {\n        audioELm.onloadeddata = () => {\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            const fromJoin = Date.now() - startTime;\n          }\n        };\n        micPub?.audioTrack?.attach(audioELm);\n      }\n      micElm.className = \"mic-on\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n    } else {\n      micElm.className = \"mic-off\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\n    }\n    micElm.addEventListener(\"click\", this.toggleAudio);\n  }\n  // updates participant UI\n  renderSmallParticipant(participant, remove = false) {\n    const container = $(\"joins-area\");\n    if (!container)\n      return;\n    const { identity } = participant;\n    let div = $(`participant-${identity}`);\n    if (!div && !remove) {\n      div = document.createElement(\"div\");\n      div.id = `participant-${identity}`;\n      div.className = \"participant\";\n      div.innerHTML = `\n      <video id=\"video-${identity}\"></video>\n      <audio id=\"audio-${identity}\"></audio>\n      <div class=\"info-bar\">\n        <div id=\"name-${identity}\" class=\"name\">\n        </div>\n        <div style=\"text-align: center;\">\n          <span id=\"codec-${identity}\" class=\"codec\">\n          </span>\n          <span id=\"size-${identity}\" class=\"size\">\n          </span>\n          <span id=\"bitrate-${identity}\" class=\"bitrate\">\n          </span>\n        </div>\n        <div class=\"right\">\n          <span id=\"signal-${identity}\"></span>\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\n        </div>\n      </div>\n      ${participant instanceof RemoteParticipant ? `<div class=\"volume-control\">\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\n      </div>` : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`}\n\n    `;\n      $(`join-element`).replaceWith(div);\n      const sizeElm = $(`size-${identity}`);\n      const videoElm2 = $(`video-${identity}`);\n      videoElm2.onresize = () => {\n        this.updateVideoSize(videoElm2, sizeElm);\n      };\n    }\n    const videoElm = $(`video-${identity}`);\n    const audioELm = $(`audio-${identity}`);\n    if (remove) {\n      div?.remove();\n      if (videoElm) {\n        videoElm.srcObject = null;\n        videoElm.src = \"\";\n      }\n      if (audioELm) {\n        audioELm.srcObject = null;\n        audioELm.src = \"\";\n      }\n      return;\n    }\n    $(`name-${identity}`).innerHTML = participant.identity;\n    if (participant instanceof LocalParticipant) {\n      $(`name-${identity}`).innerHTML += \" (you)\";\n    }\n    const micElm = $(`mic-${identity}`);\n    const signalElm = $(`signal-${identity}`);\n    const cameraPub = participant.getTrack(Track.Source.Camera);\n    const micPub = participant.getTrack(Track.Source.Microphone);\n    if (participant.isSpeaking) {\n      div.classList.add(\"speaking\");\n    } else {\n      div.classList.remove(\"speaking\");\n    }\n    if (participant instanceof RemoteParticipant) {\n      const volumeSlider = $(`volume-${identity}`);\n      volumeSlider.addEventListener(\"input\", (ev) => {\n        participant.setVolume(Number.parseFloat(ev.target.value));\n      });\n    }\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\n    if (cameraEnabled) {\n      if (participant instanceof LocalParticipant) {\n        videoElm.style.transform = \"scale(-1, 1)\";\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\n        const renderStartTime = Date.now();\n        videoElm.onloadeddata = () => {\n          const elapsed = Date.now() - renderStartTime;\n          let fromJoin = 0;\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            fromJoin = Date.now() - startTime;\n          }\n        };\n      }\n      cameraPub?.videoTrack?.attach(videoElm);\n    } else {\n      $(`size-${identity}`).innerHTML = \"\";\n      if (cameraPub?.videoTrack) {\n        cameraPub.videoTrack?.detach(videoElm);\n      } else {\n        videoElm.src = \"\";\n        videoElm.srcObject = null;\n      }\n    }\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\n    if (micEnabled) {\n      if (!(participant instanceof LocalParticipant)) {\n        audioELm.onloadeddata = () => {\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            const fromJoin = Date.now() - startTime;\n          }\n        };\n        micPub?.audioTrack?.attach(audioELm);\n      }\n      micElm.className = \"mic-on\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n    } else {\n      micElm.className = \"mic-off\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\n    }\n  }\n  flipVideo() {\n    const videoPub = currentRoom?.localParticipant.getTrack(Track.Source.Camera);\n    if (!videoPub) {\n      return;\n    }\n    state.isFrontFacing = !state.isFrontFacing;\n    const options = {\n      resolution: VideoPresets.h720.resolution,\n      facingMode: state.isFrontFacing ? \"user\" : \"environment\"\n    };\n    videoPub.videoTrack?.restartTrack(options);\n  }\n  async shareScreen() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isScreenShareEnabled;\n    console.log(`${enabled ? \"stopping\" : \"starting\"} screen share`);\n    await currentRoom.localParticipant.setScreenShareEnabled(!enabled, { audio: true });\n  }\n  startAudio() {\n    currentRoom?.startAudio();\n  }\n  handleTrackSubscribed(track, publication, participant) {\n    if (track.kind === Track.Kind.Video || track.kind === Track.Kind.Audio) {\n    }\n    track.attach();\n  }\n  handleTrackUnsubscribed(track, publication, participant) {\n    track.detach();\n  }\n  //  handleLocalTrackUnpublished(track: LocalTrackPublication, participant: LocalParticipant) {\n  //   // when local tracks are ended, update UI to remove them from rendering\n  //   track.detach();\n  // }\n  handleActiveSpeakerChange(speakers) {\n  }\n  handleDisconnect() {\n    console.log(\"disconnected from room\");\n  }\n  participantConnected(participant) {\n    participant.on(ParticipantEvent.TrackMuted, (pub) => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.TrackUnmuted, (pub) => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.IsSpeakingChanged, () => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.ConnectionQualityChanged, () => {\n      this.renderParticipant(participant);\n    });\n  }\n  participantDisconnected(participant) {\n    this.renderParticipant(participant, true);\n  }\n}\nexport default LiveKitHelper;\n",
      "start": 1684658983190,
      "end": 1684658983195,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  LocalParticipant,\n  ParticipantEvent,\n  RemoteParticipant,\n  Room,\n  RoomEvent,\n  Track,\n  VideoPresets\n} from \"/node_modules/.vite/deps/livekit-client.js?v=fe135fc6\";\nlet currentRoom;\nconst $ = (id) => document.getElementById(id);\nlet startTime;\nconst state = {\n  isFrontFacing: false,\n  encoder: new TextEncoder(),\n  decoder: new TextDecoder(),\n  defaultDevices: /* @__PURE__ */ new Map(),\n  bitrateInterval: void 0\n};\nvar DataPacket_Kind = /* @__PURE__ */ ((DataPacket_Kind2) => {\n  DataPacket_Kind2[DataPacket_Kind2[\"RELIABLE\"] = 0] = \"RELIABLE\";\n  DataPacket_Kind2[DataPacket_Kind2[\"LOSSY\"] = 1] = \"LOSSY\";\n  DataPacket_Kind2[DataPacket_Kind2[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return DataPacket_Kind2;\n})(DataPacket_Kind || {});\nclass LiveKitHelper {\n  serverUrl;\n  apiKey;\n  apiSecret;\n  constructor(serverUrl, apiKey, apiSecret) {\n    this.serverUrl = serverUrl;\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n  }\n  async connectToRoom(url, token) {\n    const roomOpts = {\n      // adaptiveStream,\n      // dynacast,\n      publishDefaults: {\n        // simulcast,\n        videoSimulcastLayers: [VideoPresets.h90, VideoPresets.h216],\n        videoCodec: \"vp8\"\n      },\n      videoCaptureDefaults: {\n        resolution: VideoPresets.h720.resolution\n      }\n    };\n    const connectOpts = {\n      autoSubscribe: true\n    };\n    const room = new Room(roomOpts);\n    startTime = Date.now();\n    await room.prepareConnection(url);\n    room.on(RoomEvent.ParticipantConnected, this.participantConnected).on(RoomEvent.ParticipantDisconnected, this.participantDisconnected).on(RoomEvent.TrackSubscribed, this.handleTrackSubscribed).on(RoomEvent.TrackUnsubscribed, this.handleTrackUnsubscribed).on(RoomEvent.ActiveSpeakersChanged, this.handleActiveSpeakerChange).on(RoomEvent.Disconnected, this.handleDisconnect).on(RoomEvent.Reconnecting, () => console.log(\"Reconnecting to room\")).on(RoomEvent.Reconnected, async () => {\n    }).on(RoomEvent.LocalTrackPublished, (pub) => {\n      const track = pub.track;\n      this.renderParticipant(room.localParticipant);\n    }).on(RoomEvent.RoomMetadataChanged, (metadata) => {\n    }).on(RoomEvent.AudioPlaybackStatusChanged, () => {\n    }).on(\n      RoomEvent.ConnectionQualityChanged,\n      (quality, participant) => {\n      }\n    ).on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\n      this.renderParticipant(participant);\n    }).on(RoomEvent.TrackUnsubscribed, (_, pub, participant) => {\n      this.renderParticipant(participant);\n    }).on(RoomEvent.SignalConnected, async () => {\n    });\n    try {\n      await room.connect(url, token, connectOpts);\n    } catch (error) {\n      let message = error;\n      if (error.message) {\n        message = error.message;\n      }\n      return;\n    }\n    currentRoom = room;\n    return room;\n  }\n  handleData(msg, participant) {\n    return state.decoder.decode(msg);\n  }\n  disconnectRoom() {\n    if (currentRoom) {\n      currentRoom.disconnect();\n    }\n  }\n  enterText(value) {\n    if (!currentRoom)\n      return false;\n    if (value) {\n      const msg = state.encoder.encode(value);\n      currentRoom.localParticipant.publishData(msg, 0 /* RELIABLE */);\n      return true;\n    }\n    return false;\n  }\n  async toggleAudio() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isMicrophoneEnabled;\n    this.setButtonDisabled(\"toggle-audio-button\", true);\n    if (enabled) {\n      console.log(\"disabling audio\");\n    } else {\n      console.log(\"enabling audio\");\n    }\n    await currentRoom.localParticipant.setMicrophoneEnabled(!enabled);\n    this.setButtonDisabled(\"toggle-audio-button\", false);\n    this.updateButtonsForPublishState();\n  }\n  updateButtonsForPublishState() {\n    if (!currentRoom) {\n      return;\n    }\n    const lp = currentRoom.localParticipant;\n    this.setButtonState(\n      \"toggle-video-button\",\n      `${lp.isCameraEnabled ? \"Disable\" : \"Enable\"} Video`,\n      lp.isCameraEnabled\n    );\n    this.setButtonState(\n      \"toggle-audio-button\",\n      `${lp.isMicrophoneEnabled ? \"Disable\" : \"Enable\"} Audio`,\n      lp.isMicrophoneEnabled\n    );\n    this.setButtonState(\n      \"share-screen-button\",\n      lp.isScreenShareEnabled ? \"Stop Screen Share\" : \"Share Screen\",\n      lp.isScreenShareEnabled\n    );\n  }\n  setButtonDisabled(buttonId, isDisabled) {\n    const el = $(buttonId);\n    el.disabled = isDisabled;\n  }\n  setButtonState(buttonId, buttonText, isActive, isDisabled = void 0) {\n    const el = $(buttonId);\n    if (!el)\n      return;\n    if (isDisabled !== void 0) {\n      el.disabled = isDisabled;\n    }\n    el.innerHTML = buttonText;\n    if (isActive) {\n      el.classList.add(\"active\");\n    } else {\n      el.classList.remove(\"active\");\n    }\n  }\n  async toggleVideo() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isCameraEnabled;\n    if (enabled) {\n      console.log(\"disabling video\");\n    } else {\n      console.log(\"enabling video\");\n    }\n    await currentRoom.localParticipant.setCameraEnabled(!enabled);\n    this.renderSmallParticipant(currentRoom.localParticipant);\n  }\n  updateVideoSize(element, target) {\n    target.innerHTML = `(${element.videoWidth}x${element.videoHeight})`;\n  }\n  // updates participant UI\n  renderParticipant(participant, remove = false) {\n    const container = $(\"participants-area\");\n    if (!container)\n      return;\n    const { identity } = participant;\n    let div = $(`participant-${identity}`);\n    if (!div && !remove) {\n      div = document.createElement(\"div\");\n      div.id = `participant-${identity}`;\n      div.className = \"participant\";\n      div.innerHTML = `\n      <video id=\"video-${identity}\"></video>\n      <audio id=\"audio-${identity}\"></audio>\n      <div class=\"info-bar\">\n        <div id=\"name-${identity}\" class=\"name\">\n        </div>\n        <div style=\"text-align: center;\">\n          <span id=\"signal-${identity}\"></span>\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\n        </div>\n        <div class=\"right\">\n          \n        </div>\n      </div>\n      ${participant instanceof RemoteParticipant ? `<div class=\"volume-control\">\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\n      </div>` : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`}\n\n    `;\n      $(`video-element`).replaceWith(div);\n      const sizeElm = $(`size-${identity}`);\n      const videoElm2 = $(`video-${identity}`);\n      videoElm2.onresize = () => {\n        this.updateVideoSize(videoElm2, sizeElm);\n      };\n    }\n    const videoElm = $(`video-${identity}`);\n    const audioELm = $(`audio-${identity}`);\n    if (remove) {\n      div?.remove();\n      if (videoElm) {\n        videoElm.srcObject = null;\n        videoElm.src = \"\";\n      }\n      if (audioELm) {\n        audioELm.srcObject = null;\n        audioELm.src = \"\";\n      }\n      return;\n    }\n    $(`name-${identity}`).innerHTML = participant.identity;\n    if (participant instanceof LocalParticipant) {\n      $(`name-${identity}`).innerHTML += \" (you)\";\n    }\n    const micElm = $(`mic-${identity}`);\n    const signalElm = $(`signal-${identity}`);\n    const cameraPub = participant.getTrack(Track.Source.Camera);\n    const micPub = participant.getTrack(Track.Source.Microphone);\n    if (participant.isSpeaking) {\n      div.classList.add(\"speaking\");\n    } else {\n      div.classList.remove(\"speaking\");\n    }\n    if (participant instanceof RemoteParticipant) {\n      const volumeSlider = $(`volume-${identity}`);\n      volumeSlider.addEventListener(\"input\", (ev) => {\n        participant.setVolume(Number.parseFloat(ev.target.value));\n      });\n    }\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\n    if (cameraEnabled) {\n      if (participant instanceof LocalParticipant) {\n        videoElm.style.transform = \"scale(-1, 1)\";\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\n        const renderStartTime = Date.now();\n        videoElm.onloadeddata = () => {\n          const elapsed = Date.now() - renderStartTime;\n          let fromJoin = 0;\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            fromJoin = Date.now() - startTime;\n          }\n        };\n      }\n      cameraPub?.videoTrack?.attach(videoElm);\n    } else {\n      $(`size-${identity}`).innerHTML = \"\";\n      if (cameraPub?.videoTrack) {\n        cameraPub.videoTrack?.detach(videoElm);\n      } else {\n        videoElm.src = \"\";\n        videoElm.srcObject = null;\n      }\n    }\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\n    if (micEnabled) {\n      if (!(participant instanceof LocalParticipant)) {\n        audioELm.onloadeddata = () => {\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            const fromJoin = Date.now() - startTime;\n          }\n        };\n        micPub?.audioTrack?.attach(audioELm);\n      }\n      micElm.className = \"mic-on\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n    } else {\n      micElm.className = \"mic-off\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\n    }\n    micElm.addEventListener(\"click\", this.toggleAudio);\n  }\n  // updates participant UI\n  renderSmallParticipant(participant, remove = false) {\n    const container = $(\"joins-area\");\n    if (!container)\n      return;\n    const { identity } = participant;\n    let div = $(`participant-${identity}`);\n    if (!div && !remove) {\n      div = document.createElement(\"div\");\n      div.id = `participant-${identity}`;\n      div.className = \"participant\";\n      div.innerHTML = `\n      <video id=\"video-${identity}\"></video>\n      <audio id=\"audio-${identity}\"></audio>\n      <div class=\"info-bar\">\n        <div id=\"name-${identity}\" class=\"name\">\n        </div>\n        <div style=\"text-align: center;\">\n          <span id=\"codec-${identity}\" class=\"codec\">\n          </span>\n          <span id=\"size-${identity}\" class=\"size\">\n          </span>\n          <span id=\"bitrate-${identity}\" class=\"bitrate\">\n          </span>\n        </div>\n        <div class=\"right\">\n          <span id=\"signal-${identity}\"></span>\n          <span id=\"mic-${identity}\" class=\"mic-on\"></span>\n        </div>\n      </div>\n      ${participant instanceof RemoteParticipant ? `<div class=\"volume-control\">\n        <input id=\"volume-${identity}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\" orient=\"vertical\" />\n      </div>` : `<progress id=\"local-volume\" max=\"1\" value=\"0\" />`}\n\n    `;\n      $(`join-element`).replaceWith(div);\n      const sizeElm = $(`size-${identity}`);\n      const videoElm2 = $(`video-${identity}`);\n      videoElm2.onresize = () => {\n        this.updateVideoSize(videoElm2, sizeElm);\n      };\n    }\n    const videoElm = $(`video-${identity}`);\n    const audioELm = $(`audio-${identity}`);\n    if (remove) {\n      div?.remove();\n      if (videoElm) {\n        videoElm.srcObject = null;\n        videoElm.src = \"\";\n      }\n      if (audioELm) {\n        audioELm.srcObject = null;\n        audioELm.src = \"\";\n      }\n      return;\n    }\n    $(`name-${identity}`).innerHTML = participant.identity;\n    if (participant instanceof LocalParticipant) {\n      $(`name-${identity}`).innerHTML += \" (you)\";\n    }\n    const micElm = $(`mic-${identity}`);\n    const signalElm = $(`signal-${identity}`);\n    const cameraPub = participant.getTrack(Track.Source.Camera);\n    const micPub = participant.getTrack(Track.Source.Microphone);\n    if (participant.isSpeaking) {\n      div.classList.add(\"speaking\");\n    } else {\n      div.classList.remove(\"speaking\");\n    }\n    if (participant instanceof RemoteParticipant) {\n      const volumeSlider = $(`volume-${identity}`);\n      volumeSlider.addEventListener(\"input\", (ev) => {\n        participant.setVolume(Number.parseFloat(ev.target.value));\n      });\n    }\n    const cameraEnabled = cameraPub && cameraPub.isSubscribed && !cameraPub.isMuted;\n    if (cameraEnabled) {\n      if (participant instanceof LocalParticipant) {\n        videoElm.style.transform = \"scale(-1, 1)\";\n      } else if (!cameraPub?.videoTrack?.attachedElements.includes(videoElm)) {\n        const renderStartTime = Date.now();\n        videoElm.onloadeddata = () => {\n          const elapsed = Date.now() - renderStartTime;\n          let fromJoin = 0;\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            fromJoin = Date.now() - startTime;\n          }\n        };\n      }\n      cameraPub?.videoTrack?.attach(videoElm);\n    } else {\n      $(`size-${identity}`).innerHTML = \"\";\n      if (cameraPub?.videoTrack) {\n        cameraPub.videoTrack?.detach(videoElm);\n      } else {\n        videoElm.src = \"\";\n        videoElm.srcObject = null;\n      }\n    }\n    const micEnabled = micPub && micPub.isSubscribed && !micPub.isMuted;\n    if (micEnabled) {\n      if (!(participant instanceof LocalParticipant)) {\n        audioELm.onloadeddata = () => {\n          if (participant.joinedAt && participant.joinedAt.getTime() < startTime) {\n            const fromJoin = Date.now() - startTime;\n          }\n        };\n        micPub?.audioTrack?.attach(audioELm);\n      }\n      micElm.className = \"mic-on\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n    } else {\n      micElm.className = \"mic-off\";\n      micElm.innerHTML = '<i class=\"fas fa-microphone-slash\"></i>';\n    }\n  }\n  flipVideo() {\n    const videoPub = currentRoom?.localParticipant.getTrack(Track.Source.Camera);\n    if (!videoPub) {\n      return;\n    }\n    state.isFrontFacing = !state.isFrontFacing;\n    const options = {\n      resolution: VideoPresets.h720.resolution,\n      facingMode: state.isFrontFacing ? \"user\" : \"environment\"\n    };\n    videoPub.videoTrack?.restartTrack(options);\n  }\n  async shareScreen() {\n    if (!currentRoom)\n      return;\n    const enabled = currentRoom.localParticipant.isScreenShareEnabled;\n    console.log(`${enabled ? \"stopping\" : \"starting\"} screen share`);\n    await currentRoom.localParticipant.setScreenShareEnabled(!enabled, { audio: true });\n  }\n  startAudio() {\n    currentRoom?.startAudio();\n  }\n  handleTrackSubscribed(track, publication, participant) {\n    if (track.kind === Track.Kind.Video || track.kind === Track.Kind.Audio) {\n    }\n    track.attach();\n  }\n  handleTrackUnsubscribed(track, publication, participant) {\n    track.detach();\n  }\n  //  handleLocalTrackUnpublished(track: LocalTrackPublication, participant: LocalParticipant) {\n  //   // when local tracks are ended, update UI to remove them from rendering\n  //   track.detach();\n  // }\n  handleActiveSpeakerChange(speakers) {\n  }\n  handleDisconnect() {\n    console.log(\"disconnected from room\");\n  }\n  participantConnected(participant) {\n    participant.on(ParticipantEvent.TrackMuted, (pub) => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.TrackUnmuted, (pub) => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.IsSpeakingChanged, () => {\n      this.renderParticipant(participant);\n    }).on(ParticipantEvent.ConnectionQualityChanged, () => {\n      this.renderParticipant(participant);\n    });\n  }\n  participantDisconnected(participant) {\n    this.renderParticipant(participant, true);\n  }\n}\nexport default LiveKitHelper;\n",
      "start": 1684658983195,
      "end": 1684658983196,
      "order": "normal"
    }
  ]
}
