{
  "resolvedId": "C:/Users/QUAN DOAN/Desktop/freelance/chat-web-client/src/components/VideoJoin.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { createSignal, onMount } from \"solid-js\";\r\nimport ChatBody, { ListElem, MessageType } from \"./ChatBody\";\r\nimport ChatFooter from \"./ChatFooter\";\r\nimport \"./VideoJoin.css\";\r\nimport { usernames } from \"../testdata/data.js\";\r\nimport LiveKitHelper from \"../helper/LiveKitHelper\";\r\nenum Command {\r\n  SUBSCRIBE = 0,\r\n  UNSUBSCRIBE = 1,\r\n  SEND_MESSAGE = 2,\r\n}\r\n\r\ninterface Message {\r\n  command: Command;\r\n  channel: string;\r\n  content: string;\r\n}\r\n\r\ninterface Content {\r\n  username: string;\r\n  message: string;\r\n}\r\n\r\nlet livekitHelper: any | undefined;\r\n\r\nexport default function VideoJoin(props) {\r\n  //TODO: replace userId with correct one when auth done\r\n  let socket: WebSocket;\r\n  let containerRef: any;\r\n  const userId = Math.floor(Math.random() * 25);\r\n  const username = usernames[userId];\r\n\r\n  const [messages, setMessages] = createSignal<Array<ListElem>>([]);\r\n\r\n  const addMessage = async (message: ListElem) => {\r\n    setMessages([...messages(), message]);\r\n    if (messages().length > 10) {\r\n      const tempMessages = [...messages()];\r\n      tempMessages.shift();\r\n      setMessages(tempMessages);\r\n    }\r\n  };\r\n  const toggleVideo = async (message: ListElem) => {\r\n    livekitHelper.toggleVideo();\r\n  };\r\n\r\n  const sendMessage = async (msg: string) => {\r\n    if (livekitHelper.enterText(msg)) {\r\n      const content: Content = {\r\n        username: username,\r\n        message: msg,\r\n      };\r\n      addMessage({\r\n        content: {\r\n          username: content.username,\r\n          content: content.message,\r\n        },\r\n        type: MessageType.SEND,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleData = (msg: string, participant: string) => {\r\n    addMessage({\r\n      content: {\r\n        username: participant,\r\n        content: new TextDecoder().decode(msg),\r\n      },\r\n      type: MessageType.SEND,\r\n    });\r\n  };\r\n\r\n  onMount(async () => {\r\n    window.addEventListener(\"ROOM_CONNECTED\", (params: any) => {\r\n      props.livekitHelper.toggleVideo();\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div class=\"join-container\">\r\n      {/* <div class=\"video-container\">\r\n        <video id=\"video-element\" class=\"grid-style\" controls></video>\r\n      </div> */}\r\n      <div class=\"join-window\" id=\"joins-area\">\r\n        <div id=\"join-element\" class=\"grid-style\" controls></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "start": 1684657839422,
      "end": 1684657839422
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"join-container\"><div class=\"join-window\" id=\"joins-area\"><div id=\"join-element\" class=\"grid-style\" controls>`);\nimport { createSignal, onMount } from \"solid-js\";\nimport { MessageType } from \"./ChatBody\";\nimport \"./VideoJoin.css\";\nimport { usernames } from \"../testdata/data.js\";\nvar Command = /*#__PURE__*/function (Command) {\n  Command[Command[\"SUBSCRIBE\"] = 0] = \"SUBSCRIBE\";\n  Command[Command[\"UNSUBSCRIBE\"] = 1] = \"UNSUBSCRIBE\";\n  Command[Command[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  return Command;\n}(Command || {});\nlet livekitHelper;\nexport default _$$component(_REGISTRY, \"VideoJoin\", function VideoJoin(props) {\n  //TODO: replace userId with correct one when auth done\n  let socket;\n  let containerRef;\n  const userId = Math.floor(Math.random() * 25);\n  const username = usernames[userId];\n  const [messages, setMessages] = createSignal([]);\n  const addMessage = async message => {\n    setMessages([...messages(), message]);\n    if (messages().length > 10) {\n      const tempMessages = [...messages()];\n      tempMessages.shift();\n      setMessages(tempMessages);\n    }\n  };\n  const toggleVideo = async message => {\n    livekitHelper.toggleVideo();\n  };\n  const sendMessage = async msg => {\n    if (livekitHelper.enterText(msg)) {\n      const content = {\n        username: username,\n        message: msg\n      };\n      addMessage({\n        content: {\n          username: content.username,\n          content: content.message\n        },\n        type: MessageType.SEND\n      });\n    }\n  };\n  const handleData = (msg, participant) => {\n    addMessage({\n      content: {\n        username: participant,\n        content: new TextDecoder().decode(msg)\n      },\n      type: MessageType.SEND\n    });\n  };\n  onMount(async () => {\n    window.addEventListener(\"ROOM_CONNECTED\", params => {\n      props.livekitHelper.toggleVideo();\n    });\n  });\n  return _$getNextElement(_tmpl$);\n}, {\n  location: \"src\\\\components\\\\VideoJoin.tsx:26:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684657839422,
      "end": 1684657839484,
      "order": "pre"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/VideoJoin.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=fe135fc6\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=fe135fc6\";\nimport { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"join-container\"><div class=\"join-window\" id=\"joins-area\"><div id=\"join-element\" class=\"grid-style\" controls>`);\nimport { createSignal, onMount } from \"/node_modules/.vite/deps/solid-js.js?v=fe135fc6\";\nimport { MessageType } from \"/src/components/ChatBody.tsx\";\nimport \"/src/components/VideoJoin.css?t=1684656853973\";\nimport { usernames } from \"/src/testdata/data.ts\";\nvar Command = /*#__PURE__*/function (Command) {\n  Command[Command[\"SUBSCRIBE\"] = 0] = \"SUBSCRIBE\";\n  Command[Command[\"UNSUBSCRIBE\"] = 1] = \"UNSUBSCRIBE\";\n  Command[Command[\"SEND_MESSAGE\"] = 2] = \"SEND_MESSAGE\";\n  return Command;\n}(Command || {});\nlet livekitHelper;\nexport default _$$component(_REGISTRY, \"VideoJoin\", function VideoJoin(props) {\n  //TODO: replace userId with correct one when auth done\n  let socket;\n  let containerRef;\n  const userId = Math.floor(Math.random() * 25);\n  const username = usernames[userId];\n  const [messages, setMessages] = createSignal([]);\n  const addMessage = async message => {\n    setMessages([...messages(), message]);\n    if (messages().length > 10) {\n      const tempMessages = [...messages()];\n      tempMessages.shift();\n      setMessages(tempMessages);\n    }\n  };\n  const toggleVideo = async message => {\n    livekitHelper.toggleVideo();\n  };\n  const sendMessage = async msg => {\n    if (livekitHelper.enterText(msg)) {\n      const content = {\n        username: username,\n        message: msg\n      };\n      addMessage({\n        content: {\n          username: content.username,\n          content: content.message\n        },\n        type: MessageType.SEND\n      });\n    }\n  };\n  const handleData = (msg, participant) => {\n    addMessage({\n      content: {\n        username: participant,\n        content: new TextDecoder().decode(msg)\n      },\n      type: MessageType.SEND\n    });\n  };\n  onMount(async () => {\n    window.addEventListener(\"ROOM_CONNECTED\", params => {\n      props.livekitHelper.toggleVideo();\n    });\n  });\n  return _$getNextElement(_tmpl$);\n}, {\n  location: \"src\\\\components\\\\VideoJoin.tsx:26:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1684657839484,
      "end": 1684657839488,
      "order": "normal"
    }
  ]
}
