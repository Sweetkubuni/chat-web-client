{
  "resolvedId": "/home/justin/Documents/chat-web-client/src/components/ChatBody.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { For, Switch, Match, createEffect, on } from \"solid-js\";\nimport MessageReceive from \"./MessageReceive\";\nimport MessageSent from \"./MessageSent\";\nimport { MessageArg } from \"./MessageArg\";\nimport \"./ChatBody.css\";\nimport MessageAdmin from \"./MessageAdmin\";\nimport MessageError from \"./MessageError\";\nimport MessageRequest from \"./MessageRequest\";\n\nexport enum MessageType {\n  SEND,\n  RECEIVE,\n  ADMIN,\n  ERROR,\n  SPECIAL_REQUEST,\n}\n\nexport interface ListElem {\n  content: MessageArg;\n  type: MessageType;\n}\n\nexport interface ListArg {\n  msgs: () => Array<ListElem>;\n  containerRef: any;\n}\n\nexport default function ChatBody(props: ListArg) {\n  console.log(\"Messages BODY: \", props.msgs);\n\n  createEffect(\n    on(\n      () => props.msgs.length,\n      () => (props.containerRef.scrollTop = props.containerRef.scrollHeight)\n    )\n  );\n\n  return (\n    <div\n      class=\"chat-body\"\n      style={{\n        \"overflow-y\": \"auto\",\n      }}\n      ref={props.containerRef}\n    >\n      <ul class=\"message-list\">\n        <For each={props.msgs()}>\n          {(msg, i) => (\n            <Switch>\n              <Match when={msg.type == MessageType.SEND}>\n                <MessageSent {...msg.content} />\n              </Match>\n              <Match when={msg.type == MessageType.RECEIVE}>\n                <MessageReceive {...msg.content} />\n              </Match>\n              <Match when={msg.type == MessageType.ADMIN}>\n                <MessageAdmin {...msg.content} />\n              </Match>\n              <Match when={msg.type == MessageType.ERROR}>\n                <MessageError {...msg.content} />\n              </Match>\n              <Match when={msg.type == MessageType.SPECIAL_REQUEST}>\n                <MessageRequest {...msg.content} />\n              </Match>\n            </Switch>\n          )}\n        </For>\n      </ul>\n    </div>\n  );\n}\n",
      "start": 1683869513868,
      "end": 1683869513868
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { use as _$use } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"chat-body\"><ul class=\"message-list\">`);\nimport { For, Switch, Match, createEffect, on } from \"solid-js\";\nimport MessageReceive from \"./MessageReceive\";\nimport MessageSent from \"./MessageSent\";\nimport \"./ChatBody.css\";\nimport MessageAdmin from \"./MessageAdmin\";\nimport MessageError from \"./MessageError\";\nimport MessageRequest from \"./MessageRequest\";\nexport let MessageType = /*#__PURE__*/function (MessageType) {\n  MessageType[MessageType[\"SEND\"] = 0] = \"SEND\";\n  MessageType[MessageType[\"RECEIVE\"] = 1] = \"RECEIVE\";\n  MessageType[MessageType[\"ADMIN\"] = 2] = \"ADMIN\";\n  MessageType[MessageType[\"ERROR\"] = 3] = \"ERROR\";\n  MessageType[MessageType[\"SPECIAL_REQUEST\"] = 4] = \"SPECIAL_REQUEST\";\n  return MessageType;\n}({});\nexport default _$$component(_REGISTRY, \"ChatBody\", function ChatBody(props) {\n  console.log(\"Messages BODY: \", props.msgs);\n  createEffect(on(() => props.msgs.length, () => props.containerRef.scrollTop = props.containerRef.scrollHeight));\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild;\n    const _ref$ = props.containerRef;\n    typeof _ref$ === \"function\" ? _$use(_ref$, _el$) : props.containerRef = _el$;\n    _el$.style.setProperty(\"overflow-y\", \"auto\");\n    _$insert(_el$2, _$createComponent(For, {\n      get each() {\n        return props.msgs();\n      },\n      children: (msg, i) => _$createComponent(Switch, {\n        get children() {\n          return [_$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SEND;\n            },\n            get children() {\n              return _$createComponent(MessageSent, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.RECEIVE;\n            },\n            get children() {\n              return _$createComponent(MessageReceive, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ADMIN;\n            },\n            get children() {\n              return _$createComponent(MessageAdmin, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ERROR;\n            },\n            get children() {\n              return _$createComponent(MessageError, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SPECIAL_REQUEST;\n            },\n            get children() {\n              return _$createComponent(MessageRequest, _$mergeProps(() => msg.content));\n            }\n          })];\n        }\n      })\n    }));\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatBody.tsx:28:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1683869513868,
      "end": 1683869513892,
      "order": "pre"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/ChatBody.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { mergeProps as _$mergeProps } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { use as _$use } from \"/node_modules/.vite/deps/solid-js_web.js?v=1564f02c\";\nimport { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"chat-body\"><ul class=\"message-list\">`);\nimport { For, Switch, Match, createEffect, on } from \"/node_modules/.vite/deps/solid-js.js?v=1564f02c\";\nimport MessageReceive from \"/src/components/MessageReceive.tsx\";\nimport MessageSent from \"/src/components/MessageSent.tsx\";\nimport \"/src/components/ChatBody.css\";\nimport MessageAdmin from \"/src/components/MessageAdmin.tsx\";\nimport MessageError from \"/src/components/MessageError.tsx\";\nimport MessageRequest from \"/src/components/MessageRequest.tsx\";\nexport let MessageType = /*#__PURE__*/function (MessageType) {\n  MessageType[MessageType[\"SEND\"] = 0] = \"SEND\";\n  MessageType[MessageType[\"RECEIVE\"] = 1] = \"RECEIVE\";\n  MessageType[MessageType[\"ADMIN\"] = 2] = \"ADMIN\";\n  MessageType[MessageType[\"ERROR\"] = 3] = \"ERROR\";\n  MessageType[MessageType[\"SPECIAL_REQUEST\"] = 4] = \"SPECIAL_REQUEST\";\n  return MessageType;\n}({});\nexport default _$$component(_REGISTRY, \"ChatBody\", function ChatBody(props) {\n  console.log(\"Messages BODY: \", props.msgs);\n  createEffect(on(() => props.msgs.length, () => props.containerRef.scrollTop = props.containerRef.scrollHeight));\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$),\n      _el$2 = _el$.firstChild;\n    const _ref$ = props.containerRef;\n    typeof _ref$ === \"function\" ? _$use(_ref$, _el$) : props.containerRef = _el$;\n    _el$.style.setProperty(\"overflow-y\", \"auto\");\n    _$insert(_el$2, _$createComponent(For, {\n      get each() {\n        return props.msgs();\n      },\n      children: (msg, i) => _$createComponent(Switch, {\n        get children() {\n          return [_$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SEND;\n            },\n            get children() {\n              return _$createComponent(MessageSent, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.RECEIVE;\n            },\n            get children() {\n              return _$createComponent(MessageReceive, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ADMIN;\n            },\n            get children() {\n              return _$createComponent(MessageAdmin, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.ERROR;\n            },\n            get children() {\n              return _$createComponent(MessageError, _$mergeProps(() => msg.content));\n            }\n          }), _$createComponent(Match, {\n            get when() {\n              return msg.type == MessageType.SPECIAL_REQUEST;\n            },\n            get children() {\n              return _$createComponent(MessageRequest, _$mergeProps(() => msg.content));\n            }\n          })];\n        }\n      })\n    }));\n    return _el$;\n  })();\n}, {\n  location: \"src/components/ChatBody.tsx:28:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1683869513892,
      "end": 1683869513895,
      "order": "normal"
    }
  ]
}
